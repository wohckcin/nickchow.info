name: Rust

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  # CARGO_INCREMENTAL: 0
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Add rust target
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
          components: clippy, rustfmt

      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Run Check
        run: cargo check
        continue-on-error: true

      - name: Lint
        run: |
          cargo fmt -- --check
          cargo clippy -- -D warnings
        continue-on-error: true

      - name: Install trunk
        run: |
          cargo install trunk

      # - name: Install cargo check tools
      #   run: |
      #     cargo install --locked cargo-deny || true
      #     cargo install --locked cargo-outdated || true
      #     cargo install --locked cargo-udeps || true
      #     cargo install --locked cargo-audit || true
      #     cargo install --locked cargo-pants || true
      # - name: Check
      #   run: |
      #     cargo deny check
      #     cargo outdated --exit-code 1
      #     cargo udeps
      #     rm -rf ~/.cargo/advisory-db
      #     cargo audit
      #     cargo pants
      # - name: Test
      #   run: cargo test

      - name: Node Dependencies
        run: |
          npm install -D

      - name: Build
        # env:
        #   RUSTFLAGS: "--cfg profile=ephemeral-build"
        run: |
          trunk build --release

      # - name: Install required cargo
      #   run: cargo install clippy-sarif sarif-fmt

      # - name: Run rust-clippy
      #   run:
      #     cargo clippy
      #     --all-features
      #     --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
      #   continue-on-error: true

      # - name: Upload analysis results to GitHub
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: rust-clippy-results.sarif
      #     wait-for-processing: true